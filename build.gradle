/**
 *
 */
buildscript {
  repositories {
    mavenCentral()
    jcenter()
    maven { url "http://repo.spring.io/snapshot" }
    maven { url "http://repo.spring.io/milestone" }
    //Needed only for SNAPSHOT versions
    //maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    classpath "info.solidsoft.gradle.pitest:gradle-pitest-plugin:${pitestPluginVersion}"
    classpath 'org.asciidoctor:asciidoctorj-epub3:' + asciidoctorjEpub3Version
    classpath 'org.asciidoctor:asciidoctorj-pdf:' + asciidoctorjPdfVersion
    classpath 'com.github.jruby-gradle:jruby-gradle-plugin:0.1.5'
  }
}

/**
 *
 */
plugins {
  id 'org.asciidoctor.convert' version "1.5.2"
  id 'org.kordamp.gradle.livereload' version "0.2.1"
}

/**
 * @see http://www.gradle.org/docs/current/userguide/groovy_plugin.html
 */
apply plugin: 'groovy'

//apply plugin: 'java'

/**
 * @see http://www.gradle.org/docs/current/userguide/codenarc_plugin.html
 */
apply plugin: 'codenarc'

/**
 * @see http://docs.spring.io/spring-boot/docs/current/reference/html/build-tool-plugins-gradle-plugin.html
 */
apply plugin: 'spring-boot'

/**
 *
 */
apply plugin: 'war'

/**
 * @see http://mrhaki.blogspot.com/2011/01/gradle-goodness-dont-let-codenarc.html
 */
//[codenarcMain, codenarcTest]*.ignoreFailures = true

/**
 * @see http://gradle-pitest-plugin.solidsoft.info/
 */
apply plugin: "info.solidsoft.pitest"

/**
 *
 */
apply plugin: 'org.asciidoctor.convert'

/**
 *
 */
apply plugin: 'org.kordamp.gradle.livereload'

/**
 *
 */
apply plugin: 'com.github.jruby-gradle.base'

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

version             = appVersion
sourceCompatibility = '1.8'
//group               = 'com.my.group'

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


/**
 *
 */
task wrapper(type: Wrapper) {
  gradleVersion = gradleVersion
}

asciidoctorj {
  version = asciidoctorJVersion
}

asciidoctor {
  backends    'html5','pdf', 'epub3'
  attributes 'build-gradle': file('build.gradle'),
    'sourcedir': project.sourceSets.main.groovy.srcDirs[0],
    'endpoint-url': 'https://mysite.com',
    'source-highlighter' : 'coderay',
    'imagesdir': './images',
    'toc':'left',
    'icons': 'font',
    'setanchors':'true',
    'idprefix':'',
    'idseparator':'-',
    'docinfo1':'true'

  dependsOn jrubyPrepareGems

  requires = ['asciidoctor-diagram']

  gemPath = jrubyPrepareGems.outputDir
}

liveReload {
  docRoot asciidoctor.outputDir.canonicalPath
}


/**
 *
 */
codenarc {
  ignoreFailures = true
  configFile = new File("${project.projectDir}/gradle/codenarc-ruleset.groovy")
}

/**
 *
 */
repositories {
  //mavenCentral()
  jcenter()
  //maven { url "http://repo.spring.io/snapshot" }
  //maven { url "http://repo.spring.io/milestone" }
  maven { url "http://repo.spring.io/libs-snapshot" }
  /*
  // Amazon S3 Repo
  // See: https://docs.gradle.org/current/release-notes
  maven {
    url "s3://someS3Bucket/maven2"
    credentials(AwsCredentials) {
      accessKey "someKey"
      secretKey "someSecret"
    }
  }

  ivy {
    url "s3://someS3Bucket/ivy"
    credentials(AwsCredentials) {
      accessKey "someKey"
      secretKey "someSecret"
    }
  }
  */
}

/**
 *
 */
sourceSets {
  main {
    groovy {
        srcDirs = ['src/main']
    }
  }
  test {
    groovy {
        srcDirs = ['src/test']
    }
  }
}

/**
 *
 */
configurations {
  groovyDoc
  providedRuntime
  compile.extendsFrom provided
}

war {
  baseName = 'app'
  version  =  '0.0.1-SNAPSHOT'
}

//run {
//  systemProperties = System.properties
//}

bootRun {
  if (project.hasProperty('args')) {
    args project.args.split('\\s+')
  }
}

pitest {
  targetClasses       = ['app.*']  //by default "${project.group}.*"
  //pitestVersion     = "1.1.4" //not needed when a default PIT version should be used
  threads             = 4
  outputFormats       = ['XML', 'HTML']
  failWhenNoMutations = false
  //testSourceSets    = [sourceSets.test]
  //mainSourceSets    = [sourceSets.main]
  //jvmArgs           = ['-Xmx1024m']
}

/**
 * @see http://stackoverflow.com/questions/14024756/slf4j-class-path-contains-multiple-slf4j-bindings
 */
configurations.all {
  exclude module: 'slf4j-log4j12'
}

springBoot {
//    backupSource = false
}

/**
 * @see http://docs.spring.io/spring-boot/docs/current/reference/html/build-tool-plugins-gradle-plugin.html#build-tool-plugins-gradle-repackage-configuration
 */
bootRepackage {
  //mainClass = 'app.Application'
  //enabled
  //classifier
  //withJarTask
  //customConfiguration
}

/**
 *
 */
dependencies {
  //http://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-build-systems.html#using-boot-gradle
  compile "org.springframework.boot:spring-boot-starter"

  //http://docs.spring.io/spring-boot/docs/1.3.0.M5/reference/htmlsingle/#using-boot-devtools
  compile "org.springframework.boot:spring-boot-devtools:$springDevtoolsVersion"

  //http://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-servlet-containers.html
  //Use Undertow instead
  //compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
  // TODO: make this providedRuntime?
  compile "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
  //providedRuntime "org.springframework.boot:spring-boot-starter-undertow:${springBootVersion}"
  compile "org.springframework.boot:spring-boot-starter-tomcat:${springBootVersion}"
  compile 'javax.servlet:javax.servlet-api:3.1.0'
  // Same tomcat version as CF buildpack: Java Buildpack Version: v3.3 | https://github.com/cloudfoundry/java-buildpack.git#378f420
  def tomcatVersion = '8.0.28'
  compile "org.apache.tomcat.embed:tomcat-embed-core:$tomcatVersion"
  compile "org.apache.tomcat.embed:tomcat-embed-websocket:$tomcatVersion"

  //def groovyVersion = "2.4.3"
  //http://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-build-systems.html#using-boot-gradle
  //compile("org.springframework.boot:spring-boot-starter")
  // Spring Cloud
  compile "org.springframework.cloud:spring-cloud-spring-service-connector:${springCloudVersion}"
  compile "org.springframework.cloud:spring-cloud-cloudfoundry-connector:${springCloudVersion}"
  compile "org.springframework.cloud:spring-cloud-localconfig-connector:${springCloudVersion}"
  // Swagger
  //compile "io.springfox:springfox-swagger2:2.2.2" // will this cause java.lang.AbstractMethodError?
  //compile 'io.springfox:springfox-swagger-ui:2.2.2' // will this cause java.lang.AbstractMethodError?
  //compile "com.mangofactory:swagger-springmvc:1.0.2"
  // Latest versions: http://docs.spring.io/spring-boot/docs/current/reference/html/appendix-dependency-versions.html
  //compile "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
  //compile "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion" // will this cause java.lang.AbstractMethodError?
  //compile "org.springframework.boot:spring-boot-starter-amqp:$springBootVersion"
  //compile "org.springframework.boot:spring-boot-starter-redis:$springBootVersion" // will this cause java.lang.AbstractMethodError?
  compile "org.springframework.boot:spring-boot-starter-security:$springBootVersion"
  //compile "org.springframework.cloud:spring-cloud-starter-zuul:$springZuulVersion" // will this cause java.lang.AbstractMethodError?
  //http://repo.spring.io/release/org/springframework/session/spring-session/ // will this cause java.lang.AbstractMethodError?
  compile "org.springframework.session:spring-session:$springSessionVersion"

  //compile "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion"
  //runtime "com.h2database:h2"
  //runtime "org.hsqldb:hsqldb"

  //compile 'org.springframework.data:spring-data-rest-hal-browser'
  //compile "org.springframework.boot:spring-boot-starter-data-rest:$springBootVersion"

  //http://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-build-systems.html#using-boot-gradle
  testCompile "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
  //compile "cz.jirutka.spring:embedmongo-spring:1.3.1"

  //compile 'org.springframework.data:spring-data-mongodb:1.8.0.RELEASE'
  //compile "org.springframework.boot:spring-boot-starter-data-mongodb:$springBootVersion"//$springBootVersion"

  //compile "org.mongodb:mongo-java-driver:3.0.0"

  compile "org.springframework.boot:spring-boot-starter-websocket"
  //compile "org.springframework:spring-messaging"

  compile 'joda-time:joda-time:2.8.2'

  compile 'commons-io:commons-io:2.4'
  compile 'commons-fileupload:commons-fileupload:1.3.1'
  compile 'org.apache.commons:commons-lang3:3.4'

  compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'

  //http://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-build-systems.html#using-boot-gradle
  //providedRuntime("org.springframework.boot:spring-boot-starter-undertow")
  //testCompile("org.springframework.boot:spring-boot-starter-test")
  // Prodcution-ready monitoring
  // http://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-enabling.html
  //compile("org.springframework.boot:spring-boot-starter-actuator")
  compile "org.codehaus.groovy:groovy-all:${groovyVersion}"
  groovyDoc 'org.codehaus.groovy:groovy-groovydoc:${groovyVersion}'
  groovyDoc 'org.codehaus.groovy:groovy-ant:${groovyVersion}'
  testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
  testCompile "org.springframework.security:spring-security-test:4.0.3.RELEASE"

  // Prodcution-ready monitoring
  // http://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-enabling.html
  //compile("org.springframework.boot:spring-boot-starter-actuator")
  compile "org.codehaus.groovy:groovy-all:${groovyVersion}", {
    exclude group: 'asm', module: 'asm-commons'
    exclude group: 'asm', module: 'asm-tree'
    exclude group: 'asm', module: 'asm-util'
    exclude group: 'asm', module: 'asm-analysis'
  }
}

/*
run {
  ignoreExitValue = true
  if(project.hasProperty("appArgs")) {
    args Eval.me(appArgs)
  }
}
*/

/**
 *
 */
groovydoc {
  groovyClasspath = configurations.groovyDoc
  destinationDir  = new File("${project.projectDir}/docs")
  docTitle        = "App"
  header          = ""
  footer          = ""
  //windowTitle   = ""
}

/**
 * See: https://jdpgrailsdev.github.io/blog/2014/10/14/spring_boot_gradle_git_info.html
 */
task generateGitProperties {
  doLast {
    try {
      def branch          = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
      def revision        = 'git rev-list --max-count 1 --timestamp HEAD'.execute().text.trim()
      def commitHash      = revision.split(' ').last()
      def timestamp       = revision ? new java.util.Date(java.util.concurrent.TimeUnit.SECONDS.toMillis(revision.split(' ').first() as long)).format("yyyy-MM-dd'T'HH:mm:ssZ") : null
      File propertiesFile = new File('git.properties')
      if(timestamp) {
        // The project may not have any resources, so create the directories and file
        if(!propertiesFile.exists()) {
          //resourcesDir.mkdirs()
          propertiesFile.createNewFile()
        }
        propertiesFile.text = """
git.branch=${branch}
git.commit.id=${commitHash}
git.commit.time=${timestamp}""".trim()
      } else {
        project.logger.error('Unable to generate Git properties file:  revision could not be retrieved from Git.')
      }
    } catch (e) {
      project.logger.error('Unable to generate Git properties file.', e)
    }
  }
} // generateGitProperties

// Incorporate above
project.tasks.jar.dependsOn('generateGitProperties')
project.tasks.war.dependsOn('generateGitProperties')

/**
 * TODO: Pack200: http://docs.oracle.com/javase/7/docs/technotes/tools/share/pack200.html
 */
task dist(dependsOn: build, type: Copy) {
  from ("${buildDir}/${libsDirName}")
  into ("./dist")
  include(war.archivePath.name)
}
